name: QR code generator

on:
  push:
    branches: [master]
    tags:
      - v*
  pull_request:
    branches: [master]
env:
  IMAGE_NAME: qr-code-generator

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name != 'push'

    steps:
      - uses: actions/checkout@v2
      - name: Fetch all history for all tags and branches
        run: |
            git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
            git fetch --prune --unshallow
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.2
        with:
          versionSpec: '5.2.x'
      - name: Use GitVersion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.2
      - run: |
         echo "Major: ${{ steps.gitversion.outputs.major }}"
         echo "Minor: ${{ steps.gitversion.outputs.minor }}"
         echo "Patch: ${{ steps.gitversion.outputs.patch }}"
         echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
         echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
         echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
         echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
         echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
         echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
         echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
         echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
         echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
         echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
         echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
         echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
         echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
         echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
         echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
         echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
         echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
         echo "Sha: ${{ steps.gitversion.outputs.sha }}"
         echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
         echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
         echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
         echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
         echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
         echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
         echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
         echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
         echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"*  ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
